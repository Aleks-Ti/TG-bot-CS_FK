import logging
import os
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from bitarray import bitarray
from stiker import (
    STICKER_ANGRY_HACKER,
    STICKER_FANNY_HACKER,
    HOT_STICKER_LIST,
    NOT_STICKER_LIST,
    COLD_STICKER_LIST,
    WIN_STICKER_LIST,
)
import asyncio as asin
from random import randint, choice
from core.utils_db import (
    create_user,
    game_data_update_users_profile,
    get_profile_users,
)
from core.utils import word_declension

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TOKEN')
TELEGRAM_CHAT_ID = os.getenv('CHAT_ID')

RETRY_PERIOD = 10  # –ü–µ—Ä–∏–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è

storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=storage)


class ByteState(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –±–∞–π—Ç –∫–æ–¥.
    """

    name = State()
    cancel = State()


class ConvertState(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–π—Ç –∫–æ–¥–∞ –≤ utf-8.
    """

    name = State()
    cancel = State()


class GamesState(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ guess game.
    """

    name = State()
    cancel = State()


class GameCon:
    """Game conditions.

    Attributes:
        SECRETS_NUM_GAME: {user_id: –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100}.
        COUNT_ATTEMPTS: {user_id: –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –æ–¥–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏}.
    """
    SECRETS_NUM_GAME = {}
    COUNT_ATTEMPTS = {}


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã."""
    current_state = await state.get_state()
    if current_state is not None:
        logging.info('Cancelling state %r', current_state)
        await state.finish()
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    else:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.')


def convert_byte(words: str) -> bytes:
    """–ö–æ–≤–Ω–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç –∫–æ–¥."""
    return ' '.join(format(x, '08b') for x in bytearray(words, 'utf-8'))


def transcript_byte(code: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ –±–∞–π—Ç –∫–æ–¥–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        bts = bitarray(code)
        symbol_utf = bts.tobytes().decode('utf-8')
        return symbol_utf
    except BaseException:
        return (
            '–£–≤—ã! –ù–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–≤–æ–∏—á–Ω—ã–º '
            '–∫–æ–¥–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!'
        )


@dp.message_handler(commands=['byte'])
async def byte_message(message: types.Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    await ByteState.name.set()
    await message.reply(
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∏–º—è, –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ '
        '–µ–≥–æ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ü¶æ'
    )


@dp.message_handler(commands=['transcript'])
async def transcript(message: types.Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏."""
    await ConvertState.name.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥ üìü –¥–ª—è –¥–µ—à–∏—Ñ—Ä–∞—Ü–∏–∏___ ')


@dp.message_handler(commands=['numbers_game'])
async def game_number(message: types.Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã."""
    await GamesState.name.set()
    identifier_user = message['from']['id']
    secret = randint(0, 100)
    GameCon.COUNT_ATTEMPTS[identifier_user] = 0
    GameCon.SECRETS_NUM_GAME[identifier_user] = secret
    await message.reply(
        '###########\n'
        '### –£–≥–∞–¥–∞–π –ß–ò–°–õ–û!\n'
        '### –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã!\n'
        '#### –ß–∏—Å–ª–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.\n'
        '### –ï—Å–ª–∏ –≤–≤–µ–¥–µ—à—å –Ω–µ —á–∏—Å–ª–æ,\n'
        '#### –æ–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —á–∏—Å–ª–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã utf-8\n'
        '##### –∏ —Ç—ã –æ—à–∏–±–µ—à—å—Å—è! üòù\n'
        '### –ï—Å–ª–∏ —Ç–≤–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–Ω–Ω–æ–≥–æ, —Ç–æ —è –ø–æ–¥—Å–∫–∞–∂—É - –≥–æ—Ä—è—á–æ,\n'
        '#### –µ—Å–ª–∏ –∂–µ —Ç–≤–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–Ω–Ω–æ–≥–æ, —Ç–æ –ø–æ–¥—Å–∫–∞–∂—É, '
        '—á—Ç–æ —Ö–æ–ª–æ–¥–Ω–æ.\n'
        '##### –∞ –µ—Å–ª–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞?! ...\n'
        '### –í–ø–µ—Ä–µ–¥ –¥—Ä—É–≥, –∫ –ø–æ–±–µ–¥–µ!!!\n'
        '###########'
    )


async def sticker_message(id, sticker):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞."""
    await bot.send_sticker(
        chat_id=id,
        sticker=choice(sticker),
    )


@dp.message_handler(state=GamesState.name)
async def guess_number(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è c —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã."""
    chat_id = message.from_user.id
    secret = GameCon.SECRETS_NUM_GAME[chat_id]
    try:
        value = int(message.text)
    except ValueError:
        value = ord(message.text[0])
    while True:
        GameCon.COUNT_ATTEMPTS[chat_id] += 1
        if 0 > value or value > 100:
            await sticker_message(chat_id, NOT_STICKER_LIST)
            await state.update_data(value=value)
            break
        if GameCon.COUNT_ATTEMPTS[chat_id] == 100:
            await state.finish()
            await bot.send_message(
                chat_id=chat_id,
                text='##########'
                '### 100 –ø–æ–ø—ã—Ç–æ–∫ —ç—Ç–æ –º–∞–∫—Å–∏–º—É–º!\n'
                '### –ß–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n'
                '### –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—å—Å—è!\n'
                '### –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n'
                '###########',
            )
            break
        if value > secret:
            await sticker_message(chat_id, HOT_STICKER_LIST)
            await state.update_data(value=value)
            break
        elif value < secret:
            await sticker_message(chat_id, COLD_STICKER_LIST)
            await state.update_data(value=value)
            break
        else:
            await sticker_message(chat_id, WIN_STICKER_LIST)
            await state.finish()
            await asin.sleep(1.5)
            count_attempts = GameCon.COUNT_ATTEMPTS.pop(chat_id)
            del GameCon.SECRETS_NUM_GAME[chat_id]
            create_user(message)
            game_data_update_users_profile(message, count_attempts)
            await bot.send_message(
                chat_id=chat_id,
                text='#######üéâüéâüéâ\n'
                '### –£–†–ê–ê–ê!!!\n### –ü–û–ë–ï–î–ê!\n'
                '### –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–≥–∞–¥–∞—Ç—å'
                ' –∑–∞ '
                + str(count_attempts)
                + ' '
                + word_declension(count_attempts)
                + '\n'
                '### üéä –í–Ω—É—à–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!!!\n'
                '### –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! \n'
                '########üéâüéâüéâ',
            )
            break


@dp.message_handler(state=ConvertState.name)
async def process_transcript(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–π—Ç –∫–æ–¥–∞ –≤ utf-8"""
    chat_id = message.from_user.id
    await state.finish()

    messages = transcript_byte(message.text)
    await bot.send_message(
        chat_id=chat_id,
        text='–õ—É—á—à–∏–µ —É—á–µ–Ω—ã–µ –º–∏—Ä–∞ –ø—Ä–∏–Ω—è–ª–∏—Å—å –∑–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É! üßÆüßÆüßÆ',
    )
    await asin.sleep(2)
    await bot.send_sticker(
        chat_id=chat_id,
        sticker=STICKER_ANGRY_HACKER,
    )
    await asin.sleep(2)
    await bot.send_message(chat_id=chat_id, text='–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è')
    await asin.sleep(2)
    await bot.send_message(
        chat_id=chat_id,
        text=f'–í–µ—Ä–Ω—É–ª—Å—è –æ—Ç–≤–µ—Ç. –ß–∏—Ç–∞–µ–º!\n–†–µ–∑—É–ª—å—Ç–∞—Ç'
        f':\n\t\t\t\t\t\t\t\t\t->\t\t\t{messages}',
    )


@dp.message_handler(state=ByteState.name)
async def process_name(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–π—Ç –∫–æ–¥."""
    chat_id = message.from_user.id
    await state.finish()
    messages = convert_byte(message.text)
    await bot.send_message(
        chat_id=chat_id,
        text='–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å üì° –Ω–∞ –≥–ª–∞–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–ª–∞–Ω–µ—Ç—ã üìüüìüüìü',
    )
    await asin.sleep(2)
    await bot.send_sticker(
        chat_id=chat_id,
        sticker=STICKER_FANNY_HACKER,
    )
    await asin.sleep(2)
    await bot.send_message(chat_id=chat_id, text='–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è')
    await asin.sleep(2)
    await bot.send_message(chat_id=chat_id, text=messages)


@dp.message_handler(commands=['profile'])
async def profile_user(message: types.Message):
    get_user = get_profile_users(message)
    await bot.send_message(chat_id=message['from']['id'], text=get_user)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã `/start`

    methods:
        create_user - —Å–æ–∑–¥–∞–Ω–∏—è —é–∑–µ—Ä–∞ –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """

    create_user(message)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton(text='/byte', callback_data='/byte')
    button_2 = types.KeyboardButton(text='/transcript')
    button_3 = types.KeyboardButton(text='/numbers_game')
    button_4 = types.KeyboardButton(text='/profile')
    button_5 = types.KeyboardButton(text='/cancel')
    keyboard.add(button_1, button_2, button_3, button_4, button_5)

    await message.reply(
        '–ü—Ä–∏–≤–µ—Ç!\n–•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –ª—é–±–æ–π —Å–∏–º–≤–æ–ª, '
        '–∏–ª–∏ –º–± —Ç–≤–æ—ë –∏–º—è –≤ –±–∞–π—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏?! - –∂–º–∏ -> /byte\n'
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥ –≤ —Å–ª–æ–≤–∞ –∏–ª–∏ –±—É–∫–≤—ã, '
        '—Ç–æ –∂–º–∏ -> /transcript\n'
        '–ê –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ? - –∂–º–∏ -> /numbers_game\n'
        '–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É üëáüëáüëá',
        reply_markup=keyboard,
    )


if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except BaseException as err:
        logging.info(f'–û—à–∏–±–∫–∞: {err}')
